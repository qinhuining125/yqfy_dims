package com.hengtianyi.dims.feature;import com.hengtianyi.common.core.feature.MyBatisSqlMonitorPlugin;import com.hengtianyi.common.core.util.StringUtil;import java.util.Properties;import org.apache.commons.lang3.math.NumberUtils;import org.apache.ibatis.executor.Executor;import org.apache.ibatis.mapping.MappedStatement;import org.apache.ibatis.plugin.Interceptor;import org.apache.ibatis.plugin.Intercepts;import org.apache.ibatis.plugin.Invocation;import org.apache.ibatis.plugin.Plugin;import org.apache.ibatis.plugin.Signature;import org.apache.ibatis.session.ResultHandler;import org.apache.ibatis.session.RowBounds;/** * SQL监控，Mybatis插件 * <p>默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p> * <ul><li>拦截执行器的方法，Executor (update, query, flushStatements, commit, rollback, getTransaction, * close, isClosed)</li> * <li>拦截参数的处理，ParameterHandler (getParameterObject, setParameters)</li> * <li>拦截结果集的处理，ResultSetHandler (handleResultSets, handleOutputParameters)</li> * <li>拦截Sql语法构建的处理，StatementHandler (prepare, parameterize, batch, update, query)</li></ul> * * @author BBF */@Intercepts({    @Signature(type = Executor.class, method = "update", args = {MappedStatement.class,        Object.class}),    @Signature(type = Executor.class, method = "query", args = {MappedStatement.class,        Object.class, RowBounds.class, ResultHandler.class})})public final class SqlMonitorPlugin implements Interceptor {  /**   * 是否监控显示SQL   */  private static final String SHOW_SQL = "false";  /**   * 慢SQL时间阀值，单位毫秒   */  private static final int SLOW_TIME = 2000;  /**   * 大集合监控阀值，单位条   */  private static final int MAX_COUNT = 80;  private boolean showSql;  private int slowTime;  private int maxCount;  public SqlMonitorPlugin() {    // Mybatis监控插件  }  @Override  public Object intercept(Invocation invocation) {    return MyBatisSqlMonitorPlugin        .intercept(invocation, this.showSql, this.slowTime, this.maxCount);  }  @Override  public Object plugin(Object target) {    return Plugin.wrap(target, this);  }  @Override  public void setProperties(Properties properties) {    showSql = StringUtil.equals(properties.getProperty("showSql", SHOW_SQL), SHOW_SQL);    slowTime = NumberUtils.toInt(properties.getProperty("slowTime"), SLOW_TIME);    maxCount = NumberUtils.toInt(properties.getProperty("maxCount"), MAX_COUNT);  }}